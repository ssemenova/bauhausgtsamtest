#include <gtsam/geometry/Pose3.h>
#include <gtsam/inference/Symbol.h>
#include <gtsam/nonlinear/Values.h>
#include <gtsam/nonlinear/ISAM2.h>

#include <string>
#include "util.h"

using namespace std;
using namespace gtsam;

//* CONSTANTS *//
const double FX = 458.654;
const double FY = 457.296;
const double S = 0.0;
const double CX = 367.215;
const double CY = 248.375;
const double SIGMA_CAMERA = 0.306555;
const Pose3 TBC = gtsam::Pose3(
    gtsam::Quaternion(0.7123014606689537, -0.0077071797555374275, 0.010499323370587278, 0.7017528002919717),
    gtsam::Point3(-0.0216401454975, -0.064676986768, 0.00981073058949));

// ... Initialization
const double INITIAL_ROLL_PITCH_SIGMA = 0.174533;
const double INITIAL_YAW_SIGMA = 0.00174533;
const double INITIAL_POSITION_SIGMA = 1e-05;
const double INITIAL_VELOCITY_SIGMA = 0.001;
const double INITIAL_ACC_BIAS_SIGMA = 0.1;
const double INITIAL_GYRO_BIAS_SIGMA = 0.01;
const double GYRO_NOISE_DENSITY = 1.7e-4;
const double ACCEL_NOISE_DENSITY = 2.0000e-3;
const double IMU_INTEGRATION_SIGMA = 1.0e-8;
const double IMU_BIAS_INIT_SIGMA = 1e-3;
const double ACCEL_RANDOM_WALK = 3.0000e-3;
const double GYRO_RANDOM_WALK = 0.5e-05;

// * INPUTS *//
const string IMAGE1_PATH = "images/1403636861151666432.png";
const string IMAGE2_PATH = "images/1403636861201666560.png";
const string IMAGE3_PATH = "images/1403636861251666432.png";

const gtsam::Pose3 INITIAL_POSE = gtsam::Pose3(gtsam::Rot3(0.530843252578703, -0.13652526466009718, -0.8329274128593758, -0.07614603212604405), gtsam::Point3(4.63308, -1.80722, 0.830638));
const gtsam::Vector3 INITIAL_VELOCITY = gtsam::Vector3(-0.060768, 0.054005, 0.617824);
const gtsam::imuBias::ConstantBias INITIAL_BIAS = gtsam::imuBias::ConstantBias(
    gtsam::Vector3(-0.024348, 0.144441, 0.06754),
    gtsam::Vector3(-0.002535, 0.021162, 0.07717));

const std::vector<gtsam::ImuMeasurement> IMU_MEASUREMENTS1 = {
    gtsam::ImuMeasurement(gtsam::Vector3(9.536967277526855, -0.1062387079000473, -4.012554168701172), gtsam::Vector3(-0.04188790172338486, 0.4663519859313965, 0.012566370889544487), 0.010000228881835938),
    gtsam::ImuMeasurement(gtsam::Vector3(9.569655895233154, -0.2206496223807335, -4.073845863342285), gtsam::Vector3(-0.030368728563189507, 0.47856926918029785, 0.027576201595366), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(9.48793363571167, -0.3064578175544739, -4.1228790283203125), gtsam::Vector3(-0.018151423893868923, 0.4925318956375122, 0.03735004551708698), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(9.304059028625488, -0.34323275089263916, -4.126965045928955), gtsam::Vector3(-0.008726646425202489, 0.5064945220947266, 0.04642575792968273), 0.00500035285949707),
    gtsam::ImuMeasurement(gtsam::Vector3(9.042548656463623, -0.3064578101038933, -4.102448463439941), gtsam::Vector3(0.0006981317419558764, 0.5124286413192749, 0.051661744713783264), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(8.8178129196167, -0.17978858575224876, -4.061587572097778), gtsam::Vector3(0.007679448928683996, 0.514523059129715, 0.04991641640663147), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(8.629851818084717, -0.08580818586051464, -4.024812698364258), gtsam::Vector3(0.009424778167158365, 0.5127777457237244, 0.0478220209479332), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(8.556302070617676, 0.008172208443284035, -4.008468151092529), gtsam::Vector3(0.008377580437809229, 0.5089380145072937, 0.045727625489234924), 0.00500035285949707),
    gtsam::ImuMeasurement(gtsam::Vector3(8.580819129943848, 0.09398039430379868, -4.000295877456665), gtsam::Vector3(0.007330382941290736, 0.5099852085113525, 0.045378560200333595), 0.004999876022338867),
};

const std::vector<gtsam::ImuMeasurement> IMU_MEASUREMENTS2 = {
    gtsam::ImuMeasurement(gtsam::Vector3(8.564474105834961, 0.12258312851190567, -3.9553487300872803), gtsam::Vector3(0.004188789986073971, 0.5208062529563904, 0.04747295379638672), 0.009999752044677734),
    gtsam::ImuMeasurement(gtsam::Vector3(8.54813003540039, 0.25333844870328903, -3.9676071405410767), gtsam::Vector3(-0.004188790364423767, 0.5232497155666351, 0.04956735111773014), 0.00500035285949707),
    gtsam::ImuMeasurement(gtsam::Vector3(8.613507747650146, 0.2901133894920349, -3.943090558052063), gtsam::Vector3(-0.009075712412595749, 0.5270894169807434, 0.048171088099479675), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(8.699316024780273, 0.2615106701850891, -3.9185739755630493), gtsam::Vector3(-0.011868238914757967, 0.5260422229766846, 0.04712389037013054), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(8.756521224975586, 0.17570248246192932, -3.8981434106826782), gtsam::Vector3(-0.015707962680608034, 0.5222025215625763, 0.045727627351880074), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(8.821898937225342, 0.07763598021119833, -3.873626708984375), gtsam::Vector3(-0.015358896926045418, 0.5197590589523315, 0.045029494911432266), 0.00500035285949707),
    gtsam::ImuMeasurement(gtsam::Vector3(8.854588031768799, -0.032688834704458714, -3.869540572166443), gtsam::Vector3(-0.010122909676283598, 0.5190609097480774, 0.048171086236834526), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(8.940395832061768, -0.08172208443284035, -3.869540572166443), gtsam::Vector3(-0.0041887902189046144, 0.5204571783542633, 0.05654866807162762), 0.004999876022338867),
    gtsam::ImuMeasurement(gtsam::Vector3(8.960826396942139, -0.08989429101347923, -3.824593424797058), gtsam::Vector3(-0.00034906581277027726, 0.5204571783542633, 0.06457718275487423), 0.005000114440917969),
};

